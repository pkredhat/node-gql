
Postgres connection
    oc port-forward statefulset/gql-node-deploy-postgres 15432:5432
    postgresdb = postgres
    user = dbuser
    pw = dbuser

MySQL
    oc port-forward statefulset/gql-node-deploy-mysql 13306:3306
    DB: appdb
    username: appuser
    password: apppass
    rootpassword: rootpass123

    mysql -h 127.0.0.1 -P 13306 -u appuser -p apppass -e 'SELECT COUNT(*) FROM books;'

sqlite3 reviews.db 'SELECT * FROM reviews;'

----


GRAPHQL_URL=https://gql-node-deploy-app-gql-node.apps.rosa.rosa-77mtr.66mc.p3.openshiftapps.com

---------------
Sample Queries
---------------
get Authors firstname lastname
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"{ authors { id firstname lastname } }"}' | jq .

get Author by ID 
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"query($id: ID!) { author(id:$id){ id firstname lastname books { id title } }}","variables":{"id":"1"}}' | jq .
  
get all reviews for one book  
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"{ book(id:\"1\"){ id title author { firstname lastname } reviews { id rating reviewerName comment } }}"}' | jq .



---------------  
Sample Mutation
---------------
  - Add author:
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"mutation($input:AddAuthorInput!){ addAuthor(input:$input){ id firstname lastname dateCreated }}","variables":{"input":{"firstname":"Donald","lastname":"Grafman","birthdate":"1979-05-04","favoriteColor":"teal","bio":"Writes slipstream thrillers."}}}' | jq .

  - Add book (pick unique book ID, reuse returned author ID):
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"mutation($input:AddBookInput!){ addBook(input:$input){ id title author { id firstname lastname } }}","variables":{"input":{"authorId":"102","title":"Infinite Tides","synopsis":"Space opera novella."}}}' | jq .

  - Add review:
* curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"mutation($bookId:ID!,$name:String!,$rating:Int!,$comment:String!){ addReview(bookId:$bookId,reviewerName:$name,rating:$rating,comment:$comment){ id bookId reviewerName rating comment }}","variables":{"bookId":"BOOK_ID","name":"CLI Tester","rating":5,"comment":"Great read!"}}' | jq .

- DELETE Author
curl -sS -X POST "$GRAPHQL_URL" -H 'content-type: application/json' -d '{"query":"mutation($id:ID!){ deleteAuthor(id:$id) }","variables":{"id":"104"}}' | jq .



--------------------
Watch the autoscaler
--------------------
oc autoscale deployment/gql-node-deploy-app --min=1 --max=5 --cpu-percent=20


watch scaling
    oc get hpa gql-node-deploy-app -w

watch pods
    oc get pods -w -l app=gql-node-deploy-app

delete hpa: 
    oc delete hpa gql-node-deploy-app

single replica : 
    oc scale deployment/gql-node-deploy-app --replicas=1